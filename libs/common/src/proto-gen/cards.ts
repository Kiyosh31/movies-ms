// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: proto/cards.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export interface Card {
  id: string;
  cardName: string;
  number: number;
  expMonth: number;
  expYear: number;
  cvc: number;
  cardType: string;
  type: string;
  userId: string;
}

export interface CreateCardRequest {
  cardName: string;
  number: number;
  expMonth: number;
  expYear: number;
  cvc: number;
  cardType: string;
  type: string;
  userId: string;
}

export interface GetCardRequest {
  id: string;
}

export interface UpdateCardRequest {
  id: string;
  cardName: string;
  number: number;
  expMonth: number;
  expYear: number;
  cvc: number;
  cardType: string;
  type: string;
  userId: string;
}

export interface DeleteCardRequest {
  id: string;
}

export interface DeleteCardResponse {}

export const CARDS_PACKAGE_NAME = 'cards';

export interface CardsServiceClient {
  createCard(request: CreateCardRequest): Observable<Card>;

  getCard(request: GetCardRequest): Observable<Card>;

  updateCard(request: UpdateCardRequest): Observable<Card>;

  deleteCard(request: DeleteCardRequest): Observable<DeleteCardResponse>;
}

export interface CardsServiceController {
  createCard(
    request: CreateCardRequest,
  ): Promise<Card> | Observable<Card> | Card;

  getCard(request: GetCardRequest): Promise<Card> | Observable<Card> | Card;

  updateCard(
    request: UpdateCardRequest,
  ): Promise<Card> | Observable<Card> | Card;

  deleteCard(
    request: DeleteCardRequest,
  ):
    | Promise<DeleteCardResponse>
    | Observable<DeleteCardResponse>
    | DeleteCardResponse;
}

export function CardsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createCard',
      'getCard',
      'updateCard',
      'deleteCard',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CardsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CardsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CARDS_SERVICE_NAME = 'CardsService';
