// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: proto/orders.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export interface Items {
  movieId: string;
  unitPrice: number;
}

export interface PaymentStatus {}

export enum PaymentStatus_Status {
  PENDING = 0,
  PROCESSING = 1,
  SUCCEEDED = 2,
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export interface Order {
  id: string;
  userId: string;
  cardId: string;
  totalAmount: number;
  paymentStatus: PaymentStatus | undefined;
  items: Items[];
  createdAt: string;
}

export interface CreateOrderRequest {
  userId: string;
  cardId: string;
  totalAmount: number;
  paymentStatus: PaymentStatus | undefined;
  items: Items[];
  createdAt: string;
}

export interface GetOrderRequest {
  id: string;
}

export const ORDERS_PACKAGE_NAME = 'Orders';

export interface OrdersServiceClient {
  createOrder(request: CreateOrderRequest): Observable<Order>;

  getOrder(request: GetOrderRequest): Observable<Order>;
}

export interface OrdersServiceController {
  createOrder(
    request: CreateOrderRequest,
  ): Promise<Order> | Observable<Order> | Order;

  getOrder(
    request: GetOrderRequest,
  ): Promise<Order> | Observable<Order> | Order;
}

export function OrdersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createOrder', 'getOrder'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('OrdersService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('OrdersService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ORDERS_SERVICE_NAME = 'OrdersService';
