// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: proto/users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role: string;
}

export interface CreateUserRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role: string;
}

export interface GetUserRequest {
  id: string;
}

export interface UpdateUserRequest {
  id: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  role?: string | undefined;
}

export interface DeleteUserRequest {
  id: string;
}

export interface DeleteUserResponse {
}

export interface AuthenticateRequest {
  email: string;
  password: string;
}

export interface AuthenticateResponse {
  token: string;
}

export interface VerifyJwtRequest {
  token: string;
}

export interface VerifyJwtResponse {
  isValid: boolean;
  user: User | undefined;
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  createUser(request: CreateUserRequest): Observable<User>;

  getUser(request: GetUserRequest): Observable<User>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  deleteUser(request: DeleteUserRequest): Observable<DeleteUserResponse>;

  authenticate(request: AuthenticateRequest): Observable<AuthenticateResponse>;

  verifyJwt(request: VerifyJwtRequest): Observable<VerifyJwtResponse>;
}

export interface UsersServiceController {
  createUser(request: CreateUserRequest): Promise<User> | Observable<User> | User;

  getUser(request: GetUserRequest): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest): Promise<User> | Observable<User> | User;

  deleteUser(
    request: DeleteUserRequest,
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;

  authenticate(
    request: AuthenticateRequest,
  ): Promise<AuthenticateResponse> | Observable<AuthenticateResponse> | AuthenticateResponse;

  verifyJwt(request: VerifyJwtRequest): Promise<VerifyJwtResponse> | Observable<VerifyJwtResponse> | VerifyJwtResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUser", "updateUser", "deleteUser", "authenticate", "verifyJwt"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
