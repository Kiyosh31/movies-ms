// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: proto/movies.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export interface Movie {
  id: string;
  title: string;
  director: string;
  year: number;
  actors: string[];
  genre: string;
  rating: number;
  price: number;
}

export interface CreateMovieRequest {
  title: string;
  director: string;
  year: number;
  actors: string[];
  genre: string;
  rating: number;
  price: number;
}

export interface GetMovieRequest {
  id: string;
}

export interface UpdateMovieRequest {
  id: string;
  title: string;
  director: string;
  year: number;
  actors: string[];
  genre: string;
  rating: number;
  price: number;
}

export interface DeleteMovieRequest {
  id: string;
}

export interface DeleteMovieResponse {}

export const MOVIES_PACKAGE_NAME = 'movies';

export interface MoviesServiceClient {
  createMovie(request: CreateMovieRequest): Observable<Movie>;

  getMovie(request: GetMovieRequest): Observable<Movie>;

  updateMovie(request: UpdateMovieRequest): Observable<Movie>;

  deleteMovie(request: DeleteMovieRequest): Observable<DeleteMovieResponse>;
}

export interface MoviesServiceController {
  createMovie(
    request: CreateMovieRequest,
  ): Promise<Movie> | Observable<Movie> | Movie;

  getMovie(
    request: GetMovieRequest,
  ): Promise<Movie> | Observable<Movie> | Movie;

  updateMovie(
    request: UpdateMovieRequest,
  ): Promise<Movie> | Observable<Movie> | Movie;

  deleteMovie(
    request: DeleteMovieRequest,
  ):
    | Promise<DeleteMovieResponse>
    | Observable<DeleteMovieResponse>
    | DeleteMovieResponse;
}

export function MoviesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createMovie',
      'getMovie',
      'updateMovie',
      'deleteMovie',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('MoviesService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('MoviesService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const MOVIES_SERVICE_NAME = 'MoviesService';
